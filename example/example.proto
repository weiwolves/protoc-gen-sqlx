syntax = "proto3";

package example;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
//import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";
//import "github.com/infobloxopen/protoc-gen-gorm/types/types.proto";
//import "google/protobuf/wrappers.proto";
//import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/weiwolves/protoc-gen-sqlx/pb/sql/sql.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

//option go_package = "github.com/weiwolves/protoc-gen-sqlx/example;example";

option (gogoproto.gostring_all) = true;

// для тестов, создаёт метод Equal, проверять идентичность
option (gogoproto.equal_all)            = true;
option (gogoproto.goproto_stringer_all) = false;
// Stringer для всех (для тестов нужно это расширение)
option (gogoproto.stringer_all)         = true;
// для тестов - наполнение случайными значениями
option (gogoproto.populate_all)         = true;
// генерация набора тестов
option (gogoproto.testgen_all)          = true;
// набор бенчмарков
option (gogoproto.benchgen_all)         = true;
// нужно
option (gogoproto.marshaler_all)        = true;
// размер сообщения
option (gogoproto.sizer_all)            = true;
// нужно
option (gogoproto.unmarshaler_all)      = true;
// enums, не важно - это для красоты
option (gogoproto.goproto_enum_prefix_all) = false;


message Empty{}

// SortCriteria represents sort criteria
message SortCriteria {
    // Tag is a JSON tag.
    string tag = 1;
    // Order is a sort order.
    enum Order {
        // ascending sort order
        ASC = 0;
        // descending sort order
        DESC = 1;
    }
    Order order = 2;
}

// Sorting represents list of sort criterias.
message Sorting {
    repeated SortCriteria sort = 1;
}

message Filtering {
    string name = 1;
    enum Mode {
        // EQ in sql =
        EQ = 0;
        // NE  in sql !=
        NE = 1;
        // GT in sql >
        GT = 2;
        // GE in sql >=
        GE = 3;
        // LT in sql <
        LT = 4;
        // LE in sql <=
        LE = 5;
        // IS_NULL in sql IS NULL
        IS_NULL = 6;
        // NOT_NULL in sql IS NOT NULL
        NOT_NULL = 7;
    }
    Mode mode = 2;
    string value = 3;
}

message PageInfo {
    int64 current = 1;
    // The service may optionally include the total number of resources being paged.
    int64 size = 2;
    // The service may optionally include the offset of the next page of resources.
    // A null value indicates no more pages.
    int64 offset = 3;
    int64 limit = 4;
}
message Response {
    bytes data = 1;
}

message ResponseList {
    repeated bytes data = 1;
//    repeated Example data = 1;
    int64 total = 2;
    PageInfo page_info = 3;
}

message Query {
    string id = 1;
    repeated string ids = 2;
    oneof params {
        int64 page = 3;
        int64 first = 4;
        int64 last = 5;
    }
    int64 limit = 6;
    repeated Filtering filter = 7;
    repeated string field = 8;
}

message MutationField {
    string name = 1;
    string value = 2;
}

message MutationResponse {
    int64 id = 1;
}

message Mutation {
    string id = 1;
    repeated MutationField fields = 8;
}

message ExampleItem {
    option (sql.opts).jsonb = true;
    option (sql.opts).orm = true;
    option (sql.opts).request = "Query";
    option (sql.opts).table = "example_items";
    //    option (sql.opts).gorm = true;
    int64 id = 1 [(gogoproto.moretags) = "db:\"id\"", (sql.field).name = "ID", (sql.field).pk = true];
    google.protobuf.Timestamp created_at = 2 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp updated_at = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    google.protobuf.Timestamp deleted_at = 4 [(gogoproto.stdtime) = true, (gogoproto.moretags) = "db:\"deleted_at\"", (gogoproto.nullable) = true];
    string name = 5 [(sql.field).tags = "db:\"name\""];
    string mess = 6 [(sql.field).drop = true];
    int64 move_id = 7 [(gogoproto.customname) = "MoveID", (sql.field).tags = "db:\"device_id\""];
}

message Example {
    option (sql.opts).jsonb = true;
    option (sql.opts).orm = true;
    option (sql.opts).request = "Query";
    option (sql.opts).table = "examples";
//    option (sql.opts).gorm = true;
    int64 id = 1 [(gogoproto.moretags) = "db:\"id\"", (sql.field).name = "ID", (sql.field).pk = true];
    google.protobuf.Timestamp created_at = 2 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp updated_at = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
    google.protobuf.Timestamp deleted_at = 4 [(gogoproto.stdtime) = true, (gogoproto.moretags) = "db:\"deleted_at\"", (gogoproto.nullable) = true];
    string name = 5 [(sql.field).tags = "db:\"name\""];
    string mess = 6 [(sql.field).drop = true];
    string product = 7;
    string organization = 8 [(sql.field).colname = "organization_id"];
    string state = 9 [(validator.field) = {regex: "^[a-z]{2,10}$"}];
    repeated ExampleItem items = 10;
}

service ExampleService {
    option (sql.server).autogen = true;
    rpc Read (Query) returns (Response) {
        option (sql.method).jsonb = true;
    }
    rpc List (Query) returns (ResponseList);
    rpc Create (Mutation) returns (MutationResponse);
    rpc Update (Mutation) returns (Empty);
}
